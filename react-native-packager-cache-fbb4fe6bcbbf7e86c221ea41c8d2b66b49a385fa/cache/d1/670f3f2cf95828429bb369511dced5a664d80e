Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/seanthomas/Documents/leadexperimentsMobile/node_modules/react-native-htmlview/HTMLView.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _htmlToElement = require('./htmlToElement');

var _htmlToElement2 = babelHelpers.interopRequireDefault(_htmlToElement);

var _reactNative = require('react-native');

var boldStyle = { fontWeight: '500' };
var italicStyle = { fontStyle: 'italic' };
var codeStyle = { fontFamily: 'Menlo' };

var baseStyles = _reactNative.StyleSheet.create({
  b: boldStyle,
  strong: boldStyle,
  i: italicStyle,
  em: italicStyle,
  pre: codeStyle,
  code: codeStyle,
  a: {
    fontWeight: '500',
    color: '#007AFF'
  },
  h1: { fontWeight: '500', fontSize: 36 },
  h2: { fontWeight: '500', fontSize: 30 },
  h3: { fontWeight: '500', fontSize: 24 },
  h4: { fontWeight: '500', fontSize: 18 },
  h5: { fontWeight: '500', fontSize: 14 },
  h6: { fontWeight: '500', fontSize: 12 }
});

var htmlToElementOptKeys = ['lineBreak', 'paragraphBreak', 'bullet', 'TextComponent', 'textComponentProps', 'NodeComponent', 'nodeComponentProps'];

var HtmlView = function (_Component) {
  babelHelpers.inherits(HtmlView, _Component);

  function HtmlView() {
    babelHelpers.classCallCheck(this, HtmlView);

    var _this = babelHelpers.possibleConstructorReturn(this, (HtmlView.__proto__ || Object.getPrototypeOf(HtmlView)).call(this));

    _this.state = {
      element: null
    };
    return _this;
  }

  babelHelpers.createClass(HtmlView, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.mounted = true;
      this.startHtmlRender(this.props.value);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        this.startHtmlRender(nextProps.value);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.mounted = false;
    }
  }, {
    key: 'startHtmlRender',
    value: function startHtmlRender(value) {
      var _this2 = this;

      if (!value) {
        this.setState({ element: null });
      }

      var opts = {
        addLineBreaks: this.props.addLineBreaks,
        linkHandler: this.props.onLinkPress,
        styles: babelHelpers.extends({}, baseStyles, this.props.stylesheet),
        customRenderer: this.props.renderNode
      };

      htmlToElementOptKeys.forEach(function (key) {
        if (typeof _this2.props[key] != 'undefined') {
          opts[key] = _this2.props[key];
        }
      });

      (0, _htmlToElement2.default)(value, opts, function (err, element) {
        if (err) {
          _this2.props.onError(err);
        }

        if (_this2.mounted) {
          _this2.setState({ element: element });
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var RootComponent = this.props.RootComponent;

      if (this.state.element) {
        return _react2.default.createElement(RootComponent, babelHelpers.extends({}, this.props.rootComponentProps, {
          children: this.state.element,
          style: this.props.style,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 95
          }
        }));
      }
      return _react2.default.createElement(RootComponent, babelHelpers.extends({}, this.props.rootComponentProps, {
        style: this.props.style,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 103
        }
      }));
    }
  }]);
  return HtmlView;
}(_react.Component);

HtmlView.propTypes = {
  addLineBreaks: _propTypes2.default.bool,
  bullet: _propTypes2.default.string,
  lineBreak: _propTypes2.default.string,
  NodeComponent: _propTypes2.default.func,
  nodeComponentProps: _propTypes2.default.object,
  onError: _propTypes2.default.func,
  onLinkPress: _propTypes2.default.func,
  paragraphBreak: _propTypes2.default.string,
  renderNode: _propTypes2.default.func,
  RootComponent: _propTypes2.default.func,
  rootComponentProps: _propTypes2.default.object,
  style: _reactNative.View.propTypes.style,
  stylesheet: _propTypes2.default.object,
  TextComponent: _propTypes2.default.func,
  textComponentProps: _propTypes2.default.object,
  value: _propTypes2.default.string
};

HtmlView.defaultProps = {
  addLineBreaks: true,
  onLinkPress: function onLinkPress(url) {
    return _reactNative.Linking.openURL(url);
  },
  onError: console.error.bind(console),
  RootComponent: _reactNative.View
};

exports.default = HtmlView;