Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/seanthomas/Documents/leadexperimentsMobile/node_modules/react-native-htmlview/htmlToElement.js';
exports.default = htmlToElement;

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _htmlparser2WithoutNodeNative = require('htmlparser2-without-node-native');

var _htmlparser2WithoutNodeNative2 = babelHelpers.interopRequireDefault(_htmlparser2WithoutNodeNative);

var _entities = require('entities');

var _entities2 = babelHelpers.interopRequireDefault(_entities);

var _AutoSizedImage = require('./AutoSizedImage');

var _AutoSizedImage2 = babelHelpers.interopRequireDefault(_AutoSizedImage);

var defaultOpts = {
  lineBreak: '\n',
  paragraphBreak: '\n\n',
  bullet: '\u2022 ',
  TextComponent: _reactNative.Text,
  textComponentProps: null,
  NodeComponent: _reactNative.Text,
  nodeComponentProps: null
};

var Img = function Img(props) {
  var width = Number(props.attribs['width']) || Number(props.attribs['data-width']) || 0;
  var height = Number(props.attribs['height']) || Number(props.attribs['data-height']) || 0;

  var imgStyle = {
    width: width,
    height: height
  };
  var source = {
    uri: props.attribs.src,
    width: width,
    height: height
  };
  return _react2.default.createElement(_AutoSizedImage2.default, { source: source, style: imgStyle, __source: {
      fileName: _jsxFileName,
      lineNumber: 35
    }
  });
};

function htmlToElement(rawHtml) {
  var customOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var done = arguments[2];

  var opts = babelHelpers.extends({}, defaultOpts, customOpts);

  function domToElement(dom, parent) {
    if (!dom) return null;

    var renderNode = opts.customRenderer;

    return dom.map(function (node, index, list) {
      if (renderNode) {
        var rendered = renderNode(node, index, list, parent, domToElement);
        if (rendered || rendered === null) return rendered;
      }

      var TextComponent = opts.TextComponent;


      if (node.type == 'text') {
        return _react2.default.createElement(
          TextComponent,
          babelHelpers.extends({}, opts.textComponentProps, {
            key: index,
            style: parent ? opts.styles[parent.name] : null,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 65
            }
          }),
          _entities2.default.decodeHTML(node.data)
        );
      }

      if (node.type == 'tag') {
        if (node.name == 'img') {
          return _react2.default.createElement(Img, { key: index, attribs: node.attribs, __source: {
              fileName: _jsxFileName,
              lineNumber: 77
            }
          });
        }

        var linkPressHandler = null;
        if (node.name == 'a' && node.attribs && node.attribs.href) {
          linkPressHandler = function linkPressHandler() {
            return opts.linkHandler(_entities2.default.decodeHTML(node.attribs.href));
          };
        }

        var linebreakBefore = null;
        var linebreakAfter = null;
        if (opts.addLineBreaks) {
          switch (node.name) {
            case 'pre':
              linebreakBefore = opts.lineBreak;
              break;
            case 'p':
              if (index < list.length - 1) {
                linebreakAfter = opts.paragraphBreak;
              }
              break;
            case 'br':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
              linebreakAfter = opts.lineBreak;
              break;
          }
        }

        var listItemPrefix = null;
        if (node.name == 'li') {
          if (parent.name == 'ol') {
            listItemPrefix = index + 1 + '. ';
          } else if (parent.name == 'ul') {
            listItemPrefix = opts.bullet;
          }
        }

        var NodeComponent = opts.NodeComponent;


        return _react2.default.createElement(
          NodeComponent,
          babelHelpers.extends({}, opts.nodeComponentProps, {
            key: index,
            onPress: linkPressHandler,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 121
            }
          }),
          linebreakBefore,
          listItemPrefix,
          domToElement(node.children, node),
          linebreakAfter
        );
      }
    });
  }

  var handler = new _htmlparser2WithoutNodeNative2.default.DomHandler(function (err, dom) {
    if (err) done(err);
    done(null, domToElement(dom));
  });
  var parser = new _htmlparser2WithoutNodeNative2.default.Parser(handler);
  parser.write(rawHtml);
  parser.done();
}