Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/seanthomas/Documents/leadexperimentsMobile/node_modules/react-native-material-bottom-navigation/lib/RippleBackgroundTransition.js';

var _react = require('react');

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require('react-native');

var _easing = require('./utils/easing');

var RippleBackgroundTransition = function (_Component) {
  babelHelpers.inherits(RippleBackgroundTransition, _Component);

  function RippleBackgroundTransition(props) {
    babelHelpers.classCallCheck(this, RippleBackgroundTransition);

    var _this = babelHelpers.possibleConstructorReturn(this, (RippleBackgroundTransition.__proto__ || Object.getPrototypeOf(RippleBackgroundTransition)).call(this, props));

    _this._initState = function () {
      return {
        animating: false,
        scale: new _reactNative.Animated.Value(_this.scaleInit),
        distance: 0
      };
    };

    _this._renderRipple = function () {
      var _this$state = _this.state,
          distance = _this$state.distance,
          scale = _this$state.scale;
      var _this$props = _this.props,
          posX = _this$props.posX,
          posY = _this$props.posY;

      var size = distance * 2;

      return _react2.default.createElement(_reactNative.Animated.View, {
        style: {
          top: posY - distance,
          left: posX - distance,
          position: 'absolute',
          width: size,
          height: size,
          borderRadius: distance,
          transform: [{ scale: scale }],
          backgroundColor: _this.props.color
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      });
    };

    _this._getLargestDistanceToBounds = function (x, y) {

      var biggestDistance = 0;

      var testVectors = [[0, 0], [_this.layout.width, 0], [_this.layout.width, _this.layout.height], [0, _this.layout.height]];
      var refVector = [x, y];

      testVectors.forEach(function (vector, i) {
        var dX = vector[0] - refVector[0];
        var dY = vector[1] - refVector[1];
        var d = dX * dX + dY * dY;

        if (d > biggestDistance) biggestDistance = d;
      });

      return Math.sqrt(biggestDistance);
    };

    _this._handleOnLayout = function (_ref) {
      var nativeEvent = _ref.nativeEvent;

      _this.layout = babelHelpers.extends({}, nativeEvent.layout);
    };

    _this.run = function () {
      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
      var _this$props2 = _this.props,
          posX = _this$props2.posX,
          posY = _this$props2.posY;

      var distance = _this._getLargestDistanceToBounds(posX, posY);

      _this.setState({
        animating: true,
        distance: distance
      });

      _reactNative.Animated.timing(_this.state.scale, {
        toValue: 1,
        duration: 349,
        easing: _easing.easeOut,
        useNativeDriver: _reactNative.Platform.OS === 'android'
      }).start(function () {
        callback(_this.props.color);

        _this.setState(_this._initState());
      });
    };

    _this.scaleInit = _reactNative.Platform.OS === 'android' ? 0.01 : 0;
    _this.layout = { x: 0, y: 0, width: 0, height: 0 };
    _this.state = _this._initState();
    return _this;
  }

  babelHelpers.createClass(RippleBackgroundTransition, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.View,
        {
          onLayout: this._handleOnLayout,
          style: { position: 'absolute', left: 0, right: 0, bottom: 0, top: 0 },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 52
          }
        },
        this.state.animating && this._renderRipple()
      );
    }
  }]);
  return RippleBackgroundTransition;
}(_react.Component);

exports.default = RippleBackgroundTransition;